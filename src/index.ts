import { app, BrowserWindow, ipcMain } from 'electron';
import Store from 'electron-store';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

import { Menu } from 'electron';

const FileLoader = require('./utils/load_file');

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Set up FileLoader instance
  const fileLoader = new FileLoader(mainWindow);

  // Set up application menu
  const menu = Menu.buildFromTemplate([
    {
      label: 'Files',
      submenu: [
        {
          label: 'Open Wordbank',
          click: async () => {
            await fileLoader.openWordbank();
          }
        }
      ]
    },
    {
      label: 'Settings',
      click: () => {
        const settingsWin = new BrowserWindow({
          width: 500,
          height: 600,
          autoHideMenuBar: true,
          webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
          },
        });
        settingsWin.loadFile('src/pages/settings.html');
      }
    },
    {
      label: 'About',
      click: () => {
        const aboutWin = new BrowserWindow({
          width: 400,
          height: 300,
          autoHideMenuBar: true,
          webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
          },
        });
        aboutWin.loadFile('src/pages/about.html');
      }
    }
  ]);
  Menu.setApplicationMenu(menu);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// Initialize settings store
const settingsStore = new Store({
  name: 'settings',
  defaults: {
    apiKey: '',
    apiUrl: 'https://api.openai.com/v1',
    modelName: 'gpt-4o-mini',
    theme: 'auto',
    language: 'en',
    difficultyAlgorithm: 'spaced',
    maxWords: 20,
    debugMode: false,
    cacheSize: 100,
    requestTimeout: 30
  }
});

// IPC handlers for settings management
ipcMain.handle('get-settings', () => {
  return (settingsStore as any).store;
});

ipcMain.handle('set-settings', (event, settings) => {
  Object.entries(settings).forEach(([key, value]) => {
    (settingsStore as any).set(key, value);
  });
  return true;
});

ipcMain.handle('test-ai-connection', async (event, settings) => {
  try {
    // Import AIConnect dynamically to avoid circular dependencies
    const AIConnect = require('./utils/ai_connect');
    const aiConnect = new AIConnect();
    
    aiConnect.initialize(settings.apiKey, settings.apiUrl, settings.modelName);
    const result = await aiConnect.testConnection();
    
    return { success: result };
  } catch (error) {
    return { success: false, error: error.message };
  }
});

// Handle settings changes from renderer
ipcMain.on('settings-changed', (event, settings) => {
  // Broadcast settings change to all windows if needed
  BrowserWindow.getAllWindows().forEach(window => {
    window.webContents.send('settings-updated', settings);
  });
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
